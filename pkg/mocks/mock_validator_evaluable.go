// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solrac97gr/go-jwt-auth/pkg/validator/domain/ports (interfaces: Evaluable)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEvaluable is a mock of Evaluable interface.
type MockEvaluable struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluableMockRecorder
}

// MockEvaluableMockRecorder is the mock recorder for MockEvaluable.
type MockEvaluableMockRecorder struct {
	mock *MockEvaluable
}

// NewMockEvaluable creates a new mock instance.
func NewMockEvaluable(ctrl *gomock.Controller) *MockEvaluable {
	mock := &MockEvaluable{ctrl: ctrl}
	mock.recorder = &MockEvaluableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluable) EXPECT() *MockEvaluableMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockEvaluable) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockEvaluableMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockEvaluable)(nil).Validate))
}

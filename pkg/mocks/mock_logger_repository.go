// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solrac97gr/go-jwt-auth/pkg/logger/domain/ports (interfaces: LoggerRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/solrac97gr/go-jwt-auth/pkg/logger/domain/models"
)

// MockLoggerRepository is a mock of LoggerRepository interface.
type MockLoggerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerRepositoryMockRecorder
}

// MockLoggerRepositoryMockRecorder is the mock recorder for MockLoggerRepository.
type MockLoggerRepositoryMockRecorder struct {
	mock *MockLoggerRepository
}

// NewMockLoggerRepository creates a new mock instance.
func NewMockLoggerRepository(ctrl *gomock.Controller) *MockLoggerRepository {
	mock := &MockLoggerRepository{ctrl: ctrl}
	mock.recorder = &MockLoggerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerRepository) EXPECT() *MockLoggerRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockLoggerRepository) Save(arg0 *models.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLoggerRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoggerRepository)(nil).Save), arg0)
}

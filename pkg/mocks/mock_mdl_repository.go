// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solrac97gr/go-jwt-auth/pkg/middleware/domain/ports (interfaces: MiddlewareRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/solrac97gr/go-jwt-auth/internal/user/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMiddlewareRepository is a mock of MiddlewareRepository interface.
type MockMiddlewareRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareRepositoryMockRecorder
}

// MockMiddlewareRepositoryMockRecorder is the mock recorder for MockMiddlewareRepository.
type MockMiddlewareRepositoryMockRecorder struct {
	mock *MockMiddlewareRepository
}

// NewMockMiddlewareRepository creates a new mock instance.
func NewMockMiddlewareRepository(ctrl *gomock.Controller) *MockMiddlewareRepository {
	mock := &MockMiddlewareRepository{ctrl: ctrl}
	mock.recorder = &MockMiddlewareRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddlewareRepository) EXPECT() *MockMiddlewareRepositoryMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockMiddlewareRepository) Authenticate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockMiddlewareRepositoryMockRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockMiddlewareRepository)(nil).Authenticate), arg0)
}

// Login mocks base method.
func (m *MockMiddlewareRepository) Login(arg0 *models.AuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockMiddlewareRepositoryMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockMiddlewareRepository)(nil).Login), arg0)
}

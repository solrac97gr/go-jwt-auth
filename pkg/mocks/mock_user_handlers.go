// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solrac97gr/go-jwt-auth/internal/user/domain/ports (interfaces: UserHandlers)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockUserHandlers is a mock of UserHandlers interface.
type MockUserHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlersMockRecorder
}

// MockUserHandlersMockRecorder is the mock recorder for MockUserHandlers.
type MockUserHandlersMockRecorder struct {
	mock *MockUserHandlers
}

// NewMockUserHandlers creates a new mock instance.
func NewMockUserHandlers(ctrl *gomock.Controller) *MockUserHandlers {
	mock := &MockUserHandlers{ctrl: ctrl}
	mock.recorder = &MockUserHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandlers) EXPECT() *MockUserHandlersMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserHandlers) Login(arg0 *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserHandlersMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserHandlers)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockUserHandlers) Register(arg0 *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserHandlersMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserHandlers)(nil).Register), arg0)
}
